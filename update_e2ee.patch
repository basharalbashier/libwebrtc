diff --git a/include/rtc_frame_cryptor.h b/include/rtc_frame_cryptor.h
index c3c015f..8ede685 100644
--- a/include/rtc_frame_cryptor.h
+++ b/include/rtc_frame_cryptor.h
@@ -13,23 +13,27 @@ enum class Algorithm {
   kAesCbc,
 };
 
+struct KeyProviderOptions {
+  bool shared_key;
+  vector<uint8_t> ratchet_salt;
+  int ratchet_window_size;
+  KeyProviderOptions(KeyProviderOptions& copy)
+      : shared_key(copy.shared_key),
+        ratchet_salt(copy.ratchet_salt),
+        ratchet_window_size(copy.ratchet_window_size) {}
+};
+
 /// Shared secret key for frame encryption.
 class KeyManager : public RefCountInterface {
  public:
-  LIB_WEBRTC_API static scoped_refptr<KeyManager> Create();
+  LIB_WEBRTC_API static scoped_refptr<KeyManager> Create(KeyProviderOptions options);
 
   /// Set the key at the given index.
   virtual bool SetKey(const string participant_id,
                       int index,
                       vector<uint8_t> key) = 0;
-
-  /// Set the keys.
-  virtual bool SetKeys(const string participant_id,
-                       vector<vector<uint8_t>> keys) = 0;
-
-  /// Get the keys.
-  virtual const vector<vector<uint8_t>> GetKeys(
-      const string participant_id) const = 0;
+  
+  virtual void RatchetKey(const string participant_id, int key_index) = 0;
 
  protected:
   virtual ~KeyManager() {}
diff --git a/src/rtc_frame_cryptor_impl.cc b/src/rtc_frame_cryptor_impl.cc
index d756db9..2bcec53 100644
--- a/src/rtc_frame_cryptor_impl.cc
+++ b/src/rtc_frame_cryptor_impl.cc
@@ -154,8 +154,8 @@ int RTCFrameCryptorImpl::key_index() const {
   return key_index_;
 }
 
-scoped_refptr<KeyManager> KeyManager::Create() {
-  return new RefCountedObject<DefaultKeyManagerImpl>();
+scoped_refptr<KeyManager> KeyManager::Create(KeyProviderOptions options) {
+  return new RefCountedObject<DefaultKeyManagerImpl>(options);
 }
 
 }  // namespace libwebrtc
diff --git a/src/rtc_frame_cryptor_impl.h b/src/rtc_frame_cryptor_impl.h
index 2dbf856..317e298 100644
--- a/src/rtc_frame_cryptor_impl.h
+++ b/src/rtc_frame_cryptor_impl.h
@@ -13,88 +13,30 @@ namespace libwebrtc {
 
 class DefaultKeyManagerImpl : public KeyManager {
  public:
-  DefaultKeyManagerImpl() {
+  DefaultKeyManagerImpl(KeyProviderOptions options) {
+    webrtc::KeyProviderOptions rtc_options;
+    rtc_options.shared_key = options.shared_key;
+    rtc_options.ratchet_salt = options.ratchet_salt.std_vector();
+    rtc_options.ratchet_window_size = options.ratchet_window_size;
     impl_ =
-        new rtc::RefCountedObject<DefaultKeyManagerImpl::KeyManagerImpl>(this);
+        new rtc::RefCountedObject<webrtc::DefaultKeyManagerImpl>(rtc_options);
   }
   ~DefaultKeyManagerImpl() {}
   /// Set the key at the given index.
   bool SetKey(const string participant_id,
               int index,
               vector<uint8_t> key) override {
-    if (index > webrtc::KeyManager::kMaxKeySize) {
-      return false;
-    }
-    auto id = participant_id.std_string();
-    if (keys_.find(id) == keys_.end()) {
-      keys_[id] = std::vector<std::vector<uint8_t>>();
-    }
-
-    webrtc::MutexLock lock(&mutex_);
-    if (index + 1 > (int)keys_[id].size()) {
-      keys_[id].resize(index + 1);
-    }
-    keys_[id][index] = key.std_vector();
-    return true;
+   return impl_->SetKey(participant_id.std_string(), index, key.std_vector());
   }
 
-  /// Set the keys.
-  bool SetKeys(const string participant_id,
-               vector<vector<uint8_t>> keys) override {
-    webrtc::MutexLock lock(&mutex_);
-    auto id = participant_id.std_string();
-    if (keys_.find(id) == keys_.end()) {
-      keys_[id] = std::vector<std::vector<uint8_t>>();
-    }
-
-    keys_[id].clear();
-    for (auto key : keys.std_vector()) {
-      keys_[id].push_back(key.std_vector());
-    }
-    return true;
-  }
-
-  const vector<vector<uint8_t>> GetKeys(
-      const string participant_id) const override {
-    webrtc::MutexLock lock(&mutex_);
-    auto id = participant_id.std_string();
-    if (keys_.find(id) == keys_.end()) {
-      return vector<vector<uint8_t>>();
-    }
-
-    return keys_.find(id)->second;
-  }
-
-  const std::vector<std::vector<uint8_t>> keys(
-      const std::string participant_id) const {
-    webrtc::MutexLock lock(&mutex_);
-    if (keys_.find(participant_id) == keys_.end()) {
-      return std::vector<std::vector<uint8_t>>();
-    }
-
-    return keys_.find(participant_id)->second;
+  virtual void RatchetKey(const string participant_id, int key_index)  override {
+    impl_->RatchetKey(participant_id.std_string(), key_index);
   }
 
   rtc::scoped_refptr<webrtc::KeyManager> rtc_key_manager() { return impl_; }
 
  private:
-  class KeyManagerImpl : public webrtc::KeyManager {
-   public:
-    KeyManagerImpl(DefaultKeyManagerImpl* parent) : parent_(parent) {}
-    ~KeyManagerImpl() {}
-    const std::vector<std::vector<uint8_t>> keys(
-        const std::string participant_id) const override {
-      return parent_->keys(participant_id);
-    }
-
-   private:
-    DefaultKeyManagerImpl* parent_;
-  };
-
- private:
-  rtc::scoped_refptr<KeyManagerImpl> impl_;
-  std::map<std::string, std::vector<std::vector<uint8_t>>> keys_;
-  mutable webrtc::Mutex mutex_;
+  rtc::scoped_refptr<webrtc::DefaultKeyManagerImpl> impl_;
 };
 
 class RTCFrameCryptorImpl : public RTCFrameCryptor,
